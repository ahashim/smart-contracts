// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.4;

import '@openzeppelin/contracts/access/IAccessControlEnumerable.sol';
import '@openzeppelin/contracts/interfaces/IERC165.sol';
import '@openzeppelin/contracts/interfaces/IERC721.sol';
import '@openzeppelin/contracts/interfaces/IERC721Enumerable.sol';

/**
 * @dev Interface for Critter contract.
 */
interface ICritter is
    IAccessControlEnumerable,
    IERC165,
    IERC721,
    IERC721Enumerable
{
    /**
     * @dev Squeak consists of an account address & a content string (limit: 256 bytes).
     */
    struct Squeak {
        address account;
        string content;
    }

    /**
     * @dev Emitted when the `sender` address creates a Critter account with a `username`.
     */
    event AccountCreated(address indexed sender, string username);

    /**
     * @dev Emitted when the `sender` address creates a squeak with `content` and is assigned a `tokenID`.
     */
    event SqueakCreated(
        address indexed sender,
        uint256 tokenId,
        string content
    );

    /**
     * @dev Emitted when the `sender` address deletes a squeak of `tokenID`.
     */
    event SqueakDeleted(address indexed sender, uint256 tokenId);

    /**
     * @dev Emitted when the `sender` address updates their account and changes an `oldUsername` to a `newUsername`.
     */
    event UsernameUpdated(
        address indexed sender,
        string oldUsername,
        string newUsername
    );

    /**
     * @dev Create a Critter account.
     *
     * Requirements:
     *
     * - The caller must not have an account.
     * - Username must be valid (see {isValidUsername} modifier).
     *
     * Emits {AccountCreated} event.
     */
    function createAccount(string memory username) external returns (bool);

    /**
     * @dev Update your critter username.
     *
     * Requirements:
     *
     * - The caller must already have an account.
     * - The caller must have the `MINTER_ROLE`.
     * - Username must be valid (see {isValidUsername} modifier).
     *
     *
     * Emits {UsernameUpdated} event.
     */
    function updateUsername(string memory newUsername) external returns (bool);

    /**
     * @dev Create a squeak.
     *
     * Requirements:
     *
     * - The caller must already have an account.
     * - The caller must have the `MINTER_ROLE`.
     * - Squeak must be between 0 & 256 bytes.
     */
    function createSqueak(string memory content) external returns (bool);

    /**
     * @dev Deletes squeak at `tokenId`.
     *
     * Requirements:
     *
     * - The caller must already have an account.
     * - The caller must own `tokenId` or be an approved operator.
     *
     * Emits {SqueakDeleted} & {Transfer} events.
     */
    function deleteSqueak(uint256 tokenId) external returns (bool);

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - The caller must have the `MINTER_ROLE`.
     */
    function mint(address to) external;

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - The caller must have the `PAUSER_ROLE`.
     */
    function pause() external;

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - The caller must have the `PAUSER_ROLE`.
     */
    function unpause() external;
}
